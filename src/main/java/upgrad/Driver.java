package upgrad;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;
import java.sql.*;

public class Driver {

	/**
	 * Driver class main method
	 * 
	 * @param args
	 * @throws SQLException
	 */
	public static void main(String[] args) {
		// MySql credentials
		String url = "jdbc:mysql://pgc-sd-bigdata.cyaielc9bmnf.us-east-1.rds.amazonaws.com:3306/pgcdata";
		String uname = "student";
		String password = "STUDENT123";
		// MongoDB Configurations
		String mongoUrl = "mongodb://ec2-54-175-107-34.compute-1.amazonaws.com";
		String dbName = "upgrad";
		String collectionName = "products";
		// Connection Default Value Initialization
		Connection sqlConnection = null;
		MongoClient mongoClient = null;

		try {
			// Creating database connections
			sqlConnection = DriverManager.getConnection(url, uname, password);
			if (sqlConnection != null) {
				System.out.println("connected");
			}
			mongoClient = MongoClients.create(mongoUrl);
			MongoDatabase db = mongoClient.getDatabase(dbName);
			MongoCollection<Document> collection = db.getCollection(collectionName);
			// Import data into MongoDb
			Statement smt = sqlConnection.createStatement();
			ResultSet cameraResults = smt.executeQuery("select * from cameras");
			ResultSetMetaData rsMeta = cameraResults.getMetaData();
			int count = rsMeta.getColumnCount();
			while (cameraResults.next()) {
				Document document = new Document();
				for (int i = 1; i <= count; i++) {
					document.append(rsMeta.getColumnName(i), cameraResults.getString(rsMeta.getColumnName(i)));
				}
				document.append("Category", "Cameras");
				collection.insertOne(document);
			}
			ResultSet headphoneResults = smt.executeQuery("select * from headphones");
			while (headphoneResults.next()) {
				Document document = new Document();
				for (int i = 1; i <= headphoneResults.getMetaData().getColumnCount(); i++) {
					document.append(headphoneResults.getMetaData().getColumnName(i), headphoneResults.getString(i));
				}
				document.append("Category", "Headphones");
				collection.insertOne(document);
			}
			ResultSet mobileResults = smt.executeQuery("select * from mobiles");
			while (mobileResults.next()) {
				Document document = new Document();
				for (int i = 1; i <= mobileResults.getMetaData().getColumnCount(); i++) {
					document.append(mobileResults.getMetaData().getColumnName(i), mobileResults.getString(i));
				}
				document.append("Category", "Mobiles");
				collection.insertOne(document);
			}
			// List all products in the inventory
			CRUDHelper.displayAllProducts(collection);

			// Display top 5 Mobiles
			CRUDHelper.displayTop5Mobiles(collection);

			// Display products ordered by their categories in Descending Order Without autogenerated Id
			CRUDHelper.displayCategoryOrderedProductsDescending(collection);

			// Display product count in each category
			CRUDHelper.displayProductCountByCategory(collection);

			// Display wired headphones
			CRUDHelper.displayWiredHeadphones(collection);
		} catch (Exception ex) {
			System.out.println("Got Exception.");
			ex.printStackTrace();
		} finally {
			// Close Connections
			try {
				sqlConnection.close();
				mongoClient.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}